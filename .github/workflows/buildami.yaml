name: Build AMI and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-ami:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Display .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "CSVPATH='/home/admin/webapp/users.csv'" >> .env
          echo "region=${{secrets.region}}">>.env
          echo "topicarn=${{secrets.topicarn}}">>.env
          cat .env 

      - name: Configure MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo systemctl start mysql
          sudo systemctl status mysql
          mysql -u root -p"${{ secrets.MY_SQL_PASSWORD }}" -e "CREATE DATABASE Assignment3;"

      - name: Run Tests
        run: npm test

      - name: Create Zip Archive
        run: |
         zip -r webapp.zip ./

      - name: Set up Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip
          unzip packer_1.7.3_linux_amd64.zip
          chmod +x packer
          sudo mv packer /usr/local/bin/
        shell: bash
        
      - name: Initialize Packer
        run: packer init aws-ubuntu.pkr.hcl

      - name: Build AMI in dev account 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          AMI_ID=$(packer build -machine-readable aws-ubuntu.pkr.hcl | awk -F, '$0 ~/artifact,0,id/ {print $6}')
          echo "Latest AMI ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Configure AWS CLI for Demo Account
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws configure set region ${{ secrets.AWS_REGION_DEMO}}
      
      - name: Create New Version of Launch Template
        run: |
          AMI_ID=${{ env.AMI_ID }}
          new_version=$(
            aws ec2 create-launch-template-version \
              --launch-template-name webAppLaunchTemplate \
              --source-version default \
              --version-description "Update AMI" \
              --launch-template-data "{\"imageId\": \"${AMI_ID}\"}" \
              --output json \
              --query 'VersionNumber'
          )
          echo "New version created: $new_version"
          echo "NEW_LAUNCH_TEMPLATE_VERSION=$new_version" >> $GITHUB_ENV

      - name: Instance Refresh Auto Scaling Group
        run: |
          # NEW_LAUNCH_TEMPLATE_VERSION is the environment variable set in the previous step
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name webAppAutoScalingGroup \
            --preferences MinHealthyPercentage=80 \
            --strategy Rolling \
            --version ${NEW_LAUNCH_TEMPLATE_VERSION}

